@startuml
title WARERING IOT PLATFORM
skinparam arrowFontSize 24
' skinparam linetype ortho
skinparam arrowColor #000000
skinparam TitleFontSize 34
skinparam defaultFontSize 24
' scale 1.5
skinparam width 500
'scale 1.5 | scale 200 width | scale 100 height | scale [max] 200x100
class User{
  - ID: String
  - firstName: String
  - lastName: String
  - email: String
  - userName: String
  - password: String
  - roles: Array
  - refreshToken : String
  - createAt : Date

  - mapToUserResponseDto(user:User) : Object
  - deleteFile(path:string) : Object
  + findOne(username: string) : Object
  + findOneToken(token: string) : Object
  + findByEmail(email: string) : Object
  + getUserByUserName(username: string) : Object
  + getUsers(username: string) : Object
  + findOneById(id: string) : Object
  + update( userUpdate: UpdateUserDto,id: string,file: Express.Multer.File,url: string) : Object
  + createUser(crateUserDto: CreateUserDto) : Object
  + deleteUser(id: string) : Object
  + verifiredUserEmail(email: string) : Object
  + setNewPassword(email: string, newPassword: string) : Object
  + setBanned(banned: boolean, id: string) : Object

}
class Administrator {
  # ID: String
  # firstName: String
  # lastName: String
  # email: String
  # userName: String
  # password: String
  # roles: Array
  # refreshToken : String
  # createAt : Date
  + updateUser():boolean
  + viewUser():Array
}
class Device{
  - deviceID: String
  - userID: String
  - nameDevice: String
  - usernameDevice: String
  - password_hash: String
  - desccription: String
  - createAt: Date
  - updateAt: Date
  ' การกำหนดการอนุญาต deny or allow
  - permission: String
  ' กำหนด subscribe ,publish เช่น "topics": ["t/1",.....]
  - subscribe: Array
  - publish: Array
  ' การกำหนดใน action publish, subscribe, or all
  - action: String
  ' Quality of Service คุณภาพในการส่ง
  - qos: Array
  ' ส่งข้อความล่าสุดเมื่อ clinet เชื่อมต่อ
  - retain: boolean
  - isSaveData: boolean

  + createDevicce(createDevice:Object,userID:string):Object
  + updateDevice(id:string,userID:string,updateDeviceDto:UpdateDeviceDto):Object
  + daleteDevice(id:string,userID:string):boolean
  + getDevice(id:string, userID:string):Object
  + getDevices(query:string,page:number,limit:number,userID:GetDevicesFilterDto):Array
  + setPermission(permission:Permission,userID:string,deviceID: string):Object
  + setStoreData(id:string, userID:string):Object
}
class Widget{
  - widgetID: String
  - deviceId: String
  - label: String
  - type: String
  - configWidget: Object
  - createdAt: Date
  - mapToWidgetResponseDto(widget:Widget):Object
  + createWidget(createWidgetDto: CreateWidgetDto,deviceId: string):Object
  + updateWidget( widgetId: string,updateWidgetDto: UpdateWidgetDto): Object
  + deleteWidget(widgetId: string): boolean
  + getWidget(widgetId: string): Object
  + getWidgets(deviceId: string): Array
}
class Webhook{
  - id:String
  - deviceID:String
  - payload: Object
  - timestamps: Data

  + insertData(device: Object, toObject: Object):Void
  + saveData(body: Object):Object
}
class ExportData{
  + exportData():Object
}
class Dashboard{
  - dashboardID:String
  - userID: String
  - dashboardInfo: Object
  - nameDashboard: String
  - description: String
  - createAt: Data
  - updateAt: Data

  - mapToDashboardResponseDto(dashboard: Dashboard):Object
  + createDashboard(createDashboardDto: CreateDashboardDto, userID: string): Object
  + updateDashboard(query: string, page: number, limit: number, currentUserId: string): Object
  + deleteDashboard(id: string): Object
  + updateDashboard(id: string, updateDashboardDto: UpdateDashboardDto): Object
  + addWidget(dashboardId: string, widgetId: string): Object
  + findOne(userID: string, dashboardId: string): Object
  + deleteWidget(dashboardId: string, widgetId: string, userID: string): Object
}
class Authentication{
  ...
  + SignIn(username: string, pass: string):Object
  + SignUp(Body: CreateUserDto):Object
  + LogOut(username: string):Void
  + Refresh(refreshToken: string):String
  + SendEmailVerification(email: string):Boolean
  + VerifyEmail(uniqueString: strin):Object
  + SendEmailForgetPassword(email: string):Boolean
  + ResetPassword(token: string, newPassword: string):Void
  + CheckIsActive(username: string):Boolean
  + CheckCredentials(username: string):Void
  + CheckAuthorization(username: string):Void
  + CheckActiveAccouct(username: string):Void
}

User -- Authentication
Administrator  -- Authentication
Administrator  -left-|> User
Device -- User
Widget -- Device
Dashboard -- User
Dashboard -left- Widget
Webhook -- Device
ExportData -- Webhook





@enduml